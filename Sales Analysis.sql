--Project: Online Retail Sales Analysis

--Description: The database includse tables such as "Customers," "Products," "Orders," and "OrderItems." It will be analyzed the data to gain insights 
-- into sales trends, customer behavior, and product performance.

--------------------Total Revenue Analysis---------------------------
--Calculating the total revenue generated by the online store for a specific time period.

SELECT sum(price) AS SALES_REVENUE 
FROM Orders ord 
JOIN OrderItems ordi
ON ord.order_id = ordi.order_id
WHERE CAST(order_date AS DATE)
BETWEEN '2022-11-10' AND '2022-12-10'

--Determine the revenue by product category or customer segment(In this case, Country).

SELECT category,SUM(ordi.price) AS Revenue_by_Product_Category
FROM orders ord
JOIN orderitems ordi ON ord.order_id = ordi.order_id
JOIN products prod ON ordi.product_id = prod.product_id
GROUP BY category
ORDER BY Revenue_by_Product_Category DESC

SELECT country,SUM(ordi.price) AS Revenue_by_Country
FROM orders ord
JOIN orderitems ordi ON ord.order_id = ordi.order_id
JOIN products prod ON ordi.product_id = prod.product_id
JOIN customers cust ON ord.customer_id = cust.customer_id
GROUP BY country
ORDER BY Revenue_by_Country DESC

--Identify the top-selling products based on revenue.

SELECT name AS TOP_SELLERS, sum(ordi.price) AS TOTAL_REVENUE
FROM products prod
JOIN orderitems ordi
ON prod.product_id = ordi.product_id
GROUP BY name
ORDER BY TOTAL_REVENUE DESC

--------------------------Customer Analysis----------------------------------:
--Identify the number of orders every customer has made

SELECT cust.customer_id, count(ord.order_id) AS AMOUNT_OF_ORDERS
FROM Customers cust
LEFT JOIN Orders ord
ON cust.customer_id = ord.customer_id
--WHERE order_id IS NOT NULL
GROUP BY cust.customer_id
--HAVING count(ord.customer_id) > 0
ORDER BY AMOUNT_OF_ORDERS DESC


--Identify the amount of unique customers that have made orders
SELECT COUNT(distinct(ord.customer_id)) AS NO_UNIQUE_CUSTOMERS
FROM Customers cust
JOIN Orders ord
ON cust.customer_id = ord.customer_id
WHERE order_id IS NOT NULL

--Determine the average order value for different customer segments(In this Case, Age)
SELECT age, sum(ordi.price) AS TOTAL_REVENUE, count(ord.customer_id) AS Amount_Of_Orders, ROUND((sum(ordi.price)/count(ord.customer_id)),2) AS Average_Order_Value
FROM Customers cust
JOIN Orders ord ON cust.customer_id = ord.customer_id
JOIN OrderItems ordi ON ordi.order_id = ord.order_id
WHERE ordi.order_id IS NOT NULL
GROUP BY age
ORDER BY Average_Order_Value

--Analysis of customer retention rates to identify loyal customers.
CREATE VIEW No_Of_Orders_Placed_By_Customers AS 
SELECT count(ord.customer_id) AS AMOUNT_OF_ORDERS
FROM Customers cust
JOIN Orders ord
ON cust.customer_id = ord.customer_id
WHERE order_id IS NOT NULL
GROUP BY ord.customer_id

SELECT ROUND((SELECT cast(COUNT(*) as float) FROM No_Of_Orders_Placed_By_Customers WHERE AMOUNT_OF_ORDERS > 1) 
/
(SELECT cast(count(distinct(customer_id)) as float) FROM Orders),3) AS Customer_Retention_Rate;

---------------------Product Performance----------------------
--Calculate the total quantity sold for each product.

SELECT name, sum(quantity) AS TOTAL_QUANTITY_SOLD
FROM orderitems ordi
JOIN products prod
ON ordi.product_id = prod.product_id
GROUP BY name
ORDER BY TOTAL_QUANTITY_SOLD DESC

--Identify the best-selling products based on the quantity sold.
SELECT name AS BEST_SELLING_PRODUCTS, sum(quantity) AS TOTAL_QUANTITY_SOLD
FROM orderitems ordi
JOIN products prod
ON ordi.product_id = prod.product_id
GROUP BY name
HAVING sum(quantity) > 24
ORDER BY TOTAL_QUANTITY_SOLD DESC

--Analyze the revenue and quantity sold for each product category.
SELECT category, sum(ordi.price) AS TOTAL_REVENUE, sum(quantity) AS TOTAL_QUANTITY_SOLD
FROM orderitems ordi
JOIN products prod ON ordi.product_id = prod.product_id
JOIN orders ord ON ordi.order_id = ord.order_id
GROUP BY category
ORDER BY TOTAL_REVENUE DESC

--------------------------Sales Trend Analysis----------------------------------:
--Identify monthly, quarterly, or yearly sales trends.

CREATE VIEW Monthly_Revenue AS
SELECT FORMAT(order_date, 'yyyy-MM') AS DATE , sum(price) AS MONTHLY_REVENUE
FROM Orders ord 
JOIN OrderItems ordi
ON ord.order_id = ordi.order_id
WHERE FORMAT(order_date, 'yyyy-MM') BETWEEN '2022-06' AND '2022-12'
GROUP BY FORMAT(order_date, 'yyyy-MM')

--Calculate the percentage growth or decline in sales compared to the previous period. (In this case, By Month)
SELECT 
Date, 
Monthly_Revenue, 
CAST(ROUND((Monthly_Revenue-LAG(Monthly_Revenue) OVER(ORDER BY Date)) / LAG(Monthly_Revenue) OVER(ORDER BY Date) * 100,2) AS VARCHAR) + '%' AS Percentage_Change,
CASE
	WHEN Monthly_Revenue > LAG(Monthly_Revenue) OVER(ORDER BY Date) THEN 'Increase'
	WHEN Monthly_Revenue < LAG(Monthly_Revenue) OVER(ORDER BY Date) THEN 'Decrease'
	ELSE 'No Change'
END AS Change_Category
FROM Monthly_Revenue

--Visualize the sales trends using line charts or bar charts.(This would be done using Power BI)

-----------------------Geographic Analysis-----------------------------
--Determine the top-selling regions or countries.

SELECT TOP 10 country AS TOP_SELLING_COUNTRIES, sum(ordi.price) AS Revenue_per_country
FROM Customers cust
JOIN Orders ord ON cust.customer_id = ord.customer_id
JOIN OrderItems ordi ON ord.order_id = ordi.order_id
GROUP BY country
ORDER by Revenue_per_country DESC

--Calculate the average order value for different regions.

SELECT country,
sum(ordi.price) AS Revenue_per_country,
count(ord.order_id) AS order_placed_per_country, 
ROUND(sum(ordi.price) / count(ord.order_id),2) AS Average_Order_Value_per_country
FROM Customers cust
JOIN Orders ord ON cust.customer_id = ord.customer_id
JOIN OrderItems ordi ON ord.order_id = ordi.order_id
GROUP BY country
ORDER BY Average_Order_Value_per_country DESC

--------------------Customer Segmentation-----------------------:
-- These can be used to Identify opportunities for targeted marketing or personalized recommendations.

--Segment customers based on their purchase behavior.

SELECT cust.customer_id, count(ord.order_id) AS AMOUNT_OF_ORDERS,
 CASE
    WHEN count(ord.order_id) >= 4 THEN 'Frequent Buyer'
    WHEN count(ord.order_id) >= 2 AND count(ord.order_id) <3 THEN 'Occasional Buyer'
    ELSE 'Infrequent Buyer'
  END AS buyer_segment
FROM Customers cust
LEFT JOIN Orders ord
ON cust.customer_id = ord.customer_id
--WHERE order_id IS NOT NULL
GROUP BY cust.customer_id
--HAVING count(ord.customer_id) > 0
ORDER BY AMOUNT_OF_ORDERS DESC

--Analyze the purchasing patterns and preferences of each segment.

--CATEGORY PURCHASE FREQUENCY BY CUSTOMER
SELECT ord.customer_id, category, count(*) AS counts
FROM customers cust
JOIN orders ord ON cust.customer_id = ord.customer_id
JOIN orderitems ordi ON ord.order_id = ordi.order_id
JOIN products prod ON ordi.product_id = prod.product_id
GROUP BY ord.customer_id, category
ORDER BY counts DESC

--CATEGORY PURCHASE FREQUENCY BY COUNTRY
SELECT cust.country, category, count(*) AS counts
FROM customers cust
JOIN orders ord ON cust.customer_id = ord.customer_id
JOIN orderitems ordi ON ord.order_id = ordi.order_id
JOIN products prod ON ordi.product_id = prod.product_id
GROUP BY cust.country, category
ORDER BY counts DESC

---------------------Order Analysis-----------------------:
--Calculate the average time between order placement and delivery.
